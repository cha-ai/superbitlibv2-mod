{"entries":[{"timestamp":1727878827612,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\",1D}^GZOo)W~0ZJ*4UAJ\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"/is_zQTbV~f}NSO.^Q,g\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/*\nCopyright (C): 2010-2019, Shenzhen Yahboom Tech\nmodified from liusen\nload dependency\n\"SuperBitV2\": \"file:../pxt-SuperBitV2\"\n*/\n\n//% color=\"#ECA40D\" weight=30 icon=\"\\uf135\"\nnamespace SuperBitV2 {\n\n    const PCA9685_ADD = 0x40\n    const MODE1 = 0x00\n    const MODE2 = 0x01\n    const SUBADR1 = 0x02\n    const SUBADR2 = 0x03\n    const SUBADR3 = 0x04\n\n    const LED0_ON_L = 0x06\n    const LED0_ON_H = 0x07\n    const LED0_OFF_L = 0x08\n    const LED0_OFF_H = 0x09\n\n    const ALL_LED_ON_L = 0xFA\n    const ALL_LED_ON_H = 0xFB\n    const ALL_LED_OFF_L = 0xFC\n    const ALL_LED_OFF_H = 0xFD\n\n    const PRESCALE = 0xFE\n\n    const STP_CHA_L = 2047\n    const STP_CHA_H = 4095\n\n    const STP_CHB_L = 1\n    const STP_CHB_H = 2047\n\n    const STP_CHC_L = 1023\n    const STP_CHC_H = 3071\n\n    const STP_CHD_L = 3071\n    const STP_CHD_H = 1023\n\n    let initialized = false\n    let yahStrip: neopixel.Strip;\n\n\n    export enum enMusic {\n\n        dadadum = 0,\n        entertainer,\n        prelude,\n        ode,\n        nyan,\n        ringtone,\n        funk,\n        blues,\n\n        birthday,\n        wedding,\n        funereal,\n        punchline,\n        baddy,\n        chase,\n        ba_ding,\n        wawawawaa,\n        jump_up,\n        jump_down,\n        power_up,\n        power_down\n    }\n\n\n\n    export enum enSteppers {\n        B1 = 0x1,\n        B2 = 0x2\n    }\n    export enum enPos {\n        //% blockId=\"forward\" block=\"forward\"\n        forward = 1,\n        //% blockId=\"reverse\" block=\"reverse\"\n        reverse = 2,\n        //% blockId=\"stop\" block=\"stop\"\n        stop = 3\n    }\n\n    export enum enTurns {\n        //% blockId=\"T1B4\" block=\"1/4\"\n        T1B4 = 90,\n        //% blockId=\"T1B2\" block=\"1/2\"\n        T1B2 = 180,\n        //% blockId=\"T1B0\" block=\"1\"\n        T1B0 = 360,\n        //% blockId=\"T2B0\" block=\"2\"\n        T2B0 = 720,\n        //% blockId=\"T3B0\" block=\"3\"\n        T3B0 = 1080,\n        //% blockId=\"T4B0\" block=\"4\"\n        T4B0 = 1440,\n        //% blockId=\"T5B0\" block=\"5\"\n        T5B0 = 1800\n    }\n\n    export enum enServo {\n\n        S1 = 0,\n        S2,\n        S3,\n        S4,\n        S5,\n        S6,\n        S7,\n        S8\n    }\n    export enum enMotors {\n        M1 = 8,\n        M2 = 10,\n        M3 = 12,\n        M4 = 14\n    }\n\n    function i2cwrite(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2ccmd(addr: number, value: number) {\n        let buf = pins.createBuffer(1)\n        buf[0] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2cread(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n\n    function initPCA9685(): void {\n        i2cwrite(PCA9685_ADD, MODE1, 0x00)\n        setFreq(50);\n        initialized = true\n    }\n\n    function setFreq(freq: number): void {\n        // Constrain the frequency\n        let prescaleval = 25000000;\n        prescaleval /= 4096;\n        prescaleval /= freq;\n        prescaleval -= 1;\n        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);\n        let oldmode = i2cread(PCA9685_ADD, MODE1);\n        let newmode = (oldmode & 0x7F) | 0x10; // sleep\n        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep\n        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler\n        i2cwrite(PCA9685_ADD, MODE1, oldmode);\n        control.waitMicros(5000);\n        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);\n    }\n\n    function setPwm(channel: number, on: number, off: number): void {\n        if (channel < 0 || channel > 15)\n            return;\n        if (!initialized) {\n            initPCA9685();\n        }\n        let buf = pins.createBuffer(5);\n        buf[0] = LED0_ON_L + 4 * channel;\n        buf[1] = on & 0xff;\n        buf[2] = (on >> 8) & 0xff;\n        buf[3] = off & 0xff;\n        buf[4] = (off >> 8) & 0xff;\n        pins.i2cWriteBuffer(PCA9685_ADD, buf);\n    }\n\n    function setStepper(index: number, dir: boolean): void {\n        if (index == enSteppers.B1) {\n            if (dir) {\n                setPwm(11, STP_CHA_L, STP_CHA_H);\n                setPwm(9, STP_CHB_L, STP_CHB_H);\n                setPwm(10, STP_CHC_L, STP_CHC_H);\n                setPwm(8, STP_CHD_L, STP_CHD_H);\n            } else {\n                setPwm(8, STP_CHA_L, STP_CHA_H);\n                setPwm(10, STP_CHB_L, STP_CHB_H);\n                setPwm(9, STP_CHC_L, STP_CHC_H);\n                setPwm(11, STP_CHD_L, STP_CHD_H);\n            }\n        } else {\n            if (dir) {\n                setPwm(12, STP_CHA_L, STP_CHA_H);\n                setPwm(14, STP_CHB_L, STP_CHB_H);\n                setPwm(13, STP_CHC_L, STP_CHC_H);\n                setPwm(15, STP_CHD_L, STP_CHD_H);\n            } else {\n                setPwm(15, STP_CHA_L, STP_CHA_H);\n                setPwm(13, STP_CHB_L, STP_CHB_H);\n                setPwm(14, STP_CHC_L, STP_CHC_H);\n                setPwm(12, STP_CHD_L, STP_CHD_H);\n            }\n        }\n    }\n\n    function stopMotor(index: number) {\n        setPwm(index, 0, 0);\n        setPwm(index + 1, 0, 0);\n    }\n    /**\n     * *****************************************************************\n     * @param index\n     */\n    //% blockId=SuperBitV2_RGB_Program block=\"RGB_Program\"\n    //% weight=99\n    //% blockGap=10\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\n    export function RGB_Program(): neopixel.Strip {\n\n        if (!yahStrip) {\n            yahStrip = neopixel.create(DigitalPin.P12, 4, NeoPixelMode.RGB);\n        }\n        return yahStrip;\n    }\n\n    //% blockId=SuperBitV2_Music block=\"Music|%index\"\n    //% weight=98\n    //% blockGap=10\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\n    export function Music(index: enMusic): void {\n        switch (index) {\n            case enMusic.dadadum: music.beginMelody(music.builtInMelody(Melodies.Dadadadum), MelodyOptions.Once); break;\n            case enMusic.birthday: music.beginMelody(music.builtInMelody(Melodies.Birthday), MelodyOptions.Once); break;\n            case enMusic.entertainer: music.beginMelody(music.builtInMelody(Melodies.Entertainer), MelodyOptions.Once); break;\n            case enMusic.prelude: music.beginMelody(music.builtInMelody(Melodies.Prelude), MelodyOptions.Once); break;\n            case enMusic.ode: music.beginMelody(music.builtInMelody(Melodies.Ode), MelodyOptions.Once); break;\n            case enMusic.nyan: music.beginMelody(music.builtInMelody(Melodies.Nyan), MelodyOptions.Once); break;\n            case enMusic.ringtone: music.beginMelody(music.builtInMelody(Melodies.Ringtone), MelodyOptions.Once); break;\n            case enMusic.funk: music.beginMelody(music.builtInMelody(Melodies.Funk), MelodyOptions.Once); break;\n            case enMusic.blues: music.beginMelody(music.builtInMelody(Melodies.Blues), MelodyOptions.Once); break;\n            case enMusic.wedding: music.beginMelody(music.builtInMelody(Melodies.Wedding), MelodyOptions.Once); break;\n            case enMusic.funereal: music.beginMelody(music.builtInMelody(Melodies.Funeral), MelodyOptions.Once); break;\n            case enMusic.punchline: music.beginMelody(music.builtInMelody(Melodies.Punchline), MelodyOptions.Once); break;\n            case enMusic.baddy: music.beginMelody(music.builtInMelody(Melodies.Baddy), MelodyOptions.Once); break;\n            case enMusic.chase: music.beginMelody(music.builtInMelody(Melodies.Chase), MelodyOptions.Once); break;\n            case enMusic.ba_ding: music.beginMelody(music.builtInMelody(Melodies.BaDing), MelodyOptions.Once); break;\n            case enMusic.wawawawaa: music.beginMelody(music.builtInMelody(Melodies.Wawawawaa), MelodyOptions.Once); break;\n            case enMusic.jump_up: music.beginMelody(music.builtInMelody(Melodies.JumpUp), MelodyOptions.Once); break;\n            case enMusic.jump_down: music.beginMelody(music.builtInMelody(Melodies.JumpDown), MelodyOptions.Once); break;\n            case enMusic.power_up: music.beginMelody(music.builtInMelody(Melodies.PowerUp), MelodyOptions.Once); break;\n            case enMusic.power_down: music.beginMelody(music.builtInMelody(Melodies.PowerDown), MelodyOptions.Once); break;\n        }\n    }\n\n    //% blockId=SuperBitV2_Servo block=\"Servo(180°)|num %num|value %value\"\n    //% weight=97\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=180\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo(num: enServo, value: number): void {\n\n        // 50hz: 20,000 us\n        let us = (value * 1800 / 180 + 600); // 0.6 ~ 2.4\n        let pwm = us * 4096 / 20000;\n        setPwm(num, 0, pwm);\n\n    }\n\n    //% blockId=SuperBitV2_Servo2 block=\"Servo(270°)|num %num|value %value\"\n    //% weight=96\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=270\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo2(num: enServo, value: number): void {\n\n        // 50hz: 20,000 us\n        let newvalue = Math.map(value, 0, 270, 0, 180);\n        let us = (newvalue * 1800 / 180 + 600); // 0.6 ~ 2.4\n        let pwm = us * 4096 / 20000;\n        setPwm(num, 0, pwm);\n\n    }\n\n    //% blockId=SuperBitV2_Servo3 block=\"Servo(360°)|num %num|pos %pos|value %value\"\n    //% weight=96\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=90\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo3(num: enServo, pos: enPos, value: number): void {\n\n        // 50hz: 20,000 us\n\n        if (pos == enPos.stop) {\n            let us = (86 * 1800 / 180 + 600); // 0.6 ~ 2.4 \n            let pwm = us * 4096 / 20000;\n            setPwm(num, 0, pwm);\n        }\n        else if (pos == enPos.forward) { //0-90 -> 90 - 0\n            let us = ((90 - value) * 1800 / 180 + 600); // 0.6 ~ 2.4 \n            let pwm = us * 4096 / 20000;\n            setPwm(num, 0, pwm);\n        }\n        else if (pos == enPos.reverse) { //0-90 -> 90 -180  \n            let us = ((90 + value) * 1800 / 180 + 600); // 0.6 ~ 2.4\n            let pwm = us * 4096 / 20000;\n            setPwm(num, 0, pwm);\n        }\n\n\n\n    }\n\n    //% blockId=SuperBitV2_Servo4 block=\"Servo(360°_rotatable)|num %num|pos %pos|value %value\"\n    //% weight=96\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=90\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo4(num: enServo, pos: enPos, value: number): void {\n\n        // 50hz: 20,000 us\n\n        if (pos == enPos.stop) {\n            let us = (110 * 1800 / 180 + 600); // 0.6 ~ 2.4 error:86->110\n            let pwm = us * 4096 / 20000;\n            setPwm(num, 0, pwm);\n        }\n        else if (pos == enPos.forward) { //0-90 -> 90 - 0\n            let us = ((110 - value) * 1800 / 180 + 600); // 0.6 ~ 2.4 error:90->110\n            let pwm = us * 4096 / 20000;\n            setPwm(num, 0, pwm);\n        }\n        else if (pos == enPos.reverse) { //0-90 -> 90 -180  error:90->110\n            let us = ((110 + value) * 1800 / 180 + 600); // 0.6 ~ 2.4\n            let pwm = us * 4096 / 20000;\n            setPwm(num, 0, pwm);\n        }\n\n\n\n    }\n\n\n    //% blockId=SuperBitV2_MotorRun block=\"Motor|%index|speed(-255~255) %speed\"\n    //% weight=93\n    //% speed.min=-255 speed.max=255\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\n    export function MotorRun(index: enMotors, speed: number): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n        speed = speed * 16; // map 255 to 4096\n        if (speed >= 4096) {\n            speed = 4095\n        }\n        if (speed <= -4096) {\n            speed = -4095\n        }\n\n        let a = index\n        let b = index + 1\n\n        if (a > 10) {\n            if (speed >= 0) {\n                setPwm(a, 0, speed)\n                setPwm(b, 0, 0)\n            } else {\n                setPwm(a, 0, 0)\n                setPwm(b, 0, -speed)\n            }\n        }\n        else {\n            if (speed >= 0) {\n                setPwm(b, 0, speed)\n                setPwm(a, 0, 0)\n            } else {\n                setPwm(b, 0, 0)\n                setPwm(a, 0, -speed)\n            }\n        }\n\n    }\n\n    //% blockId=SuperBitV2_MotorRunDual block=\"Motor|%motor1|speed %speed1|%motor2|speed %speed2\"\n    //% weight=92\n    //% blockGap=50\n    //% speed1.min=-255 speed1.max=255\n    //% speed2.min=-255 speed2.max=255\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=2\n    export function MotorRunDual(motor1: enMotors, speed1: number, motor2: enMotors, speed2: number): void {\n        MotorRun(motor1, speed1);\n        MotorRun(motor2, speed2);\n    }\n\n    //% blockId=SuperBitV2_MotorStopAll block=\"Motor Stop All\"\n    //% weight=91\n    //% blockGap=50\n    export function MotorStopAll(): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n\n        stopMotor(enMotors.M1);\n        stopMotor(enMotors.M2);\n        stopMotor(enMotors.M3);\n        stopMotor(enMotors.M4);\n\n    }\n\n}\n\n//% color=\"#228B22\" weight=25 icon=\"\\uf0b2\"\nnamespace SuperBitV2_Digital {\n\n    export enum mwDigitalNum {\n        //% blockId=\"P4P6\" block=\"P4P6\"\n        P4P6 = 1,\n        //% blockId=\"P1P2\" block=\"P1P2\"\n        P1P2 = 2,\n        //% blockId=\"P0P3\" block=\"P0P3\"\n        P0P3 = 3,\n        //% blockId=\"P10P9\" block=\"P10P9\"\n        P10P9 = 4,\n        //% blockId=\"P7P8\" block=\"P7P8\"\n        P7P8 = 5,\n        //% blockId=\"P5P11\" block=\"P5P11\"\n        P5P11 = 6\n    }\n\n\n    export enum enObstacle {\n        //% blockId=\"Obstacle\" block=\"Obstacle\"\n        Obstacle = 0,\n        //% blockId=\"NoObstacle\" block=\"NoObstacle\"\n        NoObstacle = 1\n    }\n\n    export enum enPIR {\n        //% blockId=\"NoPIR\" block=\"NoPIR\"\n        NoPIR = 0,\n        //% blockId=\"OPIR\" block=\"OPIR\"\n        OPIR = 1\n    }\n\n    export enum enCollision {\n        //% blockId=\"NoCollision\" block=\"NoCollision\"\n        NoCollision = 0,\n        //% blockId=\"OCollision\" block=\"OCollision\"\n        OCollision = 1\n    }\n\n    export enum enVibration {\n        //% blockId=\"NoVibration\" block=\"NoVibration\"\n        NoVibration = 0,\n        //% blockId=\"OVibration\" block=\"OVibration\"\n        OVibration = 1\n    }\n\n    export enum DHT11Type {\n        //% block=\"temperature(℃)\" enumval=0\n        DHT11_temperature_C,\n\n        //% block=\"temperature(℉)\" enumval=1\n        DHT11_temperature_F,\n\n        //% block=\"humidity(0~100)\" enumval=2\n        DHT11_humidity,\n    }\n    export enum enButton {\n        //% blockId=\"Press\" block=\"Press\"\n        Press = 0,\n        //% blockId=\"Realse\" block=\"Realse\"\n        Realse = 1\n    }\n\n    //% blockId=\"readdht11\" block=\"value of dht11 %dht11type| at pin %value_DNum\"\n    //% weight=100\n    //% blockGap=20\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5 \n    export function dht11value(dht11type: DHT11Type, value_DNum: mwDigitalNum): number {\n        let dht11pin;\n        if (value_DNum == 1) { dht11pin = DigitalPin.P4; }\n        else if (value_DNum == 2) { dht11pin = DigitalPin.P1; }\n        else if (value_DNum == 3) { dht11pin = DigitalPin.P0; }\n        else if (value_DNum == 4) { dht11pin = DigitalPin.P10; }\n        else if (value_DNum == 5) { dht11pin = DigitalPin.P7; }\n        else if (value_DNum == 6) { dht11pin = DigitalPin.P5; }\n\n        pins.digitalWritePin(dht11pin, 0)\n        basic.pause(18)\n        let i = pins.digitalReadPin(dht11pin)\n        pins.setPull(dht11pin, PinPullMode.PullUp);\n        switch (dht11type) {\n            case 0:\n                let dhtvalue1 = 0;\n                let dhtcounter1 = 0;\n                let dhtcounter1d = 0;\n                while (pins.digitalReadPin(dht11pin) == 1);\n                while (pins.digitalReadPin(dht11pin) == 0);\n                while (pins.digitalReadPin(dht11pin) == 1);\n                for (let i = 0; i <= 32 - 1; i++) {\n                    dhtcounter1d = 0\n                    while (pins.digitalReadPin(dht11pin) == 0) {\n                        dhtcounter1d += 1;\n                    }\n                    dhtcounter1 = 0\n                    while (pins.digitalReadPin(dht11pin) == 1) {\n                        dhtcounter1 += 1;\n                    }\n                    if (i > 15) {\n                        if (dhtcounter1 > dhtcounter1d) {\n                            dhtvalue1 = dhtvalue1 + (1 << (31 - i));\n                        }\n                    }\n                }\n                return ((dhtvalue1 & 0x0000ff00) >> 8);\n                break;\n            case 1:\n                while (pins.digitalReadPin(dht11pin) == 1);\n                while (pins.digitalReadPin(dht11pin) == 0);\n                while (pins.digitalReadPin(dht11pin) == 1);\n                let dhtvalue = 0;\n                let dhtcounter = 0;\n                let dhtcounterd = 0;\n                for (let i = 0; i <= 32 - 1; i++) {\n                    dhtcounterd = 0\n                    while (pins.digitalReadPin(dht11pin) == 0) {\n                        dhtcounterd += 1;\n                    }\n                    dhtcounter = 0\n                    while (pins.digitalReadPin(dht11pin) == 1) {\n                        dhtcounter += 1;\n                    }\n                    if (i > 15) {\n                        if (dhtcounter > dhtcounterd) {\n                            dhtvalue = dhtvalue + (1 << (31 - i));\n                        }\n                    }\n                }\n                return Math.round((((dhtvalue & 0x0000ff00) >> 8) * 9 / 5) + 32);\n                break;\n            case 2:\n                while (pins.digitalReadPin(dht11pin) == 1);\n                while (pins.digitalReadPin(dht11pin) == 0);\n                while (pins.digitalReadPin(dht11pin) == 1);\n\n                let value = 0;\n                let counter = 0;\n                let counterd = 0;\n\n                for (let i = 0; i <= 8 - 1; i++) {\n                    counterd = 0\n                    while (pins.digitalReadPin(dht11pin) == 0) {\n                        counterd += 1;\n                    }\n                    counter = 0\n                    while (pins.digitalReadPin(dht11pin) == 1) {\n                        counter += 1;\n                    }\n                    if (counter > counterd) {\n                        value = value + (1 << (7 - i));\n                    }\n                }\n                return value;\n            default:\n                return 0;\n        }\n    }\n\n\n    //% blockId=SuperBitV2_Digital_Ultrasonic block=\"Ultrasonic|pin %value_DNum\"\n    //% weight=97\n    //% blockGap=20\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5\n    export function Ultrasonic(value_DNum: mwDigitalNum): number {\n        //send pulse\n        let Trig, Echo;\n        if (value_DNum == 1) { Trig = DigitalPin.P4; Echo = DigitalPin.P6; }\n        else if (value_DNum == 2) { Trig = DigitalPin.P1; Echo = DigitalPin.P2; }\n        else if (value_DNum == 3) { Trig = DigitalPin.P0; Echo = DigitalPin.P3; }\n        else if (value_DNum == 4) { Trig = DigitalPin.P10; Echo = DigitalPin.P9; }\n        else if (value_DNum == 5) { Trig = DigitalPin.P7; Echo = DigitalPin.P8; }\n        else if (value_DNum == 6) { Trig = DigitalPin.P5; Echo = DigitalPin.P11; }\n\n\n        pins.setPull(Trig, PinPullMode.PullNone);\n        pins.digitalWritePin(Trig, 0);\n        control.waitMicros(2);\n        pins.digitalWritePin(Trig, 1);\n        control.waitMicros(10);\n        pins.digitalWritePin(Trig, 0);\n\n        //read pulse, maximum distance=500cm\n        const d = pins.pulseIn(Echo, PulseValue.High, 500 * 58);\n\n        return Math.idiv(d, 58);\n    }\n\n    //% blockId=SuperBitV2_Digital_IR block=\"IR|pin %value_DNum|value %value\"\n    //% weight=96\n    //% blockGap=20\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5\n    export function IR(value_DNum: mwDigitalNum, value: enObstacle): boolean {\n        let pin;\n        if (value_DNum == 1) { pin = DigitalPin.P4; }\n        else if (value_DNum == 2) { pin = DigitalPin.P1; }\n        else if (value_DNum == 3) { pin = DigitalPin.P0; }\n        else if (value_DNum == 4) { pin = DigitalPin.P10; }\n        else if (value_DNum == 5) { pin = DigitalPin.P7; }\n        else if (value_DNum == 6) { pin = DigitalPin.P5; }\n\n        pins.setPull(pin, PinPullMode.PullUp);\n        return pins.digitalReadPin(pin) == value;\n    }\n\n    //% blockId=SuperBitV2_Digital_PIR block=\"PIR|pin %value_DNum|value %value\"\n    //% weight=96\n    //% blockGap=20\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5\n    export function PIR(value_DNum: mwDigitalNum, value: enPIR): boolean {\n        let pin;\n        if (value_DNum == 1) { pin = DigitalPin.P4; }\n        else if (value_DNum == 2) { pin = DigitalPin.P1; }\n        else if (value_DNum == 3) { pin = DigitalPin.P0; }\n        else if (value_DNum == 4) { pin = DigitalPin.P10; }\n        else if (value_DNum == 5) { pin = DigitalPin.P7; }\n        else if (value_DNum == 6) { pin = DigitalPin.P5; }\n\n        pins.setPull(pin, PinPullMode.PullDown);\n        pins.digitalWritePin(pin, 1);\n        return pins.digitalReadPin(pin) == value;\n    }\n\n    //% blockId=SuperBitV2_Digital_Collision block=\"Collision|pin %value_DNum|value %value\"\n    //% weight=3\n    //% blockGap=20\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5\n    export function Collision(value_DNum: mwDigitalNum, value: enCollision): boolean {\n\n        let pin;\n        if (value_DNum == 1) { pin = DigitalPin.P4; }\n        else if (value_DNum == 2) { pin = DigitalPin.P1; }\n        else if (value_DNum == 3) { pin = DigitalPin.P0; }\n        else if (value_DNum == 4) { pin = DigitalPin.P10; }\n        else if (value_DNum == 5) { pin = DigitalPin.P7; }\n        else if (value_DNum == 6) { pin = DigitalPin.P5; }\n\n        pins.setPull(pin, PinPullMode.PullUp);\n        return pins.digitalReadPin(pin) == value;\n    }\n\n    //% blockId=SuperBitV2_Digital_Button block=\"Button|pin %value_DNum|value %value\"\n    //% weight=3\n    //% blockGap=20\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5\n    export function Button(value_DNum: mwDigitalNum, value: enButton): boolean {\n\n        let pin;\n        if (value_DNum == 1) { pin = DigitalPin.P4; }\n        else if (value_DNum == 2) { pin = DigitalPin.P1; }\n        else if (value_DNum == 3) { pin = DigitalPin.P0; }\n        else if (value_DNum == 4) { pin = DigitalPin.P10; }\n        else if (value_DNum == 5) { pin = DigitalPin.P7; }\n        else if (value_DNum == 6) { pin = DigitalPin.P5; }\n\n        pins.setPull(pin, PinPullMode.PullUp);\n        return pins.digitalReadPin(pin) == value;\n    }\n    //% blockId=SuperBitV2_Digital_Vibration block=\"Vibration|pin %value_DNum|get \"\n    //% weight=1\n    //% blockGap=20\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5\n    export function Vibration(value_DNum: mwDigitalNum, handle: () => void): void {\n        let pin;\n        if (value_DNum == 1) { pin = DigitalPin.P4; }\n        else if (value_DNum == 2) { pin = DigitalPin.P1; }\n        else if (value_DNum == 3) { pin = DigitalPin.P0; }\n        else if (value_DNum == 4) { pin = DigitalPin.P10; }\n        else if (value_DNum == 5) { pin = DigitalPin.P7; }\n        else if (value_DNum == 6) { pin = DigitalPin.P5; }\n\n        pins.setPull(pin, PinPullMode.PullUp);\n        pins.setEvents(pin, PinEventType.Edge);\n        control.onEvent(pin, DAL.MICROBIT_PIN_EVT_FALL, handle);\n    }\n\n\n}\n\n//% color=\"#C814B8\" weight=24 icon=\"\\uf080\"\nnamespace SuperBitV2_Analog {\n\n    export enum enRocker {\n        //% blockId=\"NoState\" block=\"NoState\"\n        NoState = 0,\n        //% blockId=\"Up\" block=\"Up\"\n        Up,\n        //% blockId=\"Down\" block=\"Down\"\n        Down,\n        //% blockId=\"Left\" block=\"Left\"\n        Left,\n        //% blockId=\"Right\" block=\"Right\"\n        Right\n    }\n\n    export enum mwAnalogNum {\n        //% blockId=\"P4P6\" block=\"P4P6\"\n        AP4P6 = 1,\n        //% blockId=\"P1P2\" block=\"P1P2\"\n        AP1P2 = 2,\n        //% blockId=\"P0P3\" block=\"P0P3\"\n        AP0P3 = 3,\n        //% blockId=\"P10P9\" block=\"P10P9\"\n        AP10P9 = 4\n    }\n\n    export enum mwAnalogNum2 {\n        //% blockId=\"P1P2\" block=\"P1P2\"\n        AP1P2 = 1,\n        //% blockId=\"P0P3\" block=\"P0P3\"\n        AP0P3 = 2\n    }\n\n    //% blockId=SuperBitV2_Anaglog_Light block=\"Light|pin %value_ANum\"\n    //% weight=100\n    //% blockGap=20\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5 \n    export function Light(value_ANum: mwAnalogNum): number {\n        let lightpin;\n        let value: number;\n        if (value_ANum == 1) { lightpin = AnalogPin.P4; }\n        else if (value_ANum == 2) { lightpin = AnalogPin.P1; }\n        else if (value_ANum == 3) { lightpin = AnalogPin.P0; }\n        else if (value_ANum == 4) { lightpin = AnalogPin.P10; }\n\n        value = 1024 - pins.analogReadPin(lightpin);\n        return value;\n        //return 0;\n    }\n\n    //% blockId=SuperBitV2_Anaglog_Sound block=\"Sound|pin %value_ANum\"\n    //% weight=99\n    //% blockGap=20\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5\n    export function Sound(value_ANum: mwAnalogNum): number {\n        let soundpin;\n        let value: number;\n        if (value_ANum == 1) { soundpin = AnalogPin.P4; }\n        else if (value_ANum == 2) { soundpin = AnalogPin.P1; }\n        else if (value_ANum == 3) { soundpin = AnalogPin.P0; }\n        else if (value_ANum == 4) { soundpin = AnalogPin.P10; }\n\n        value = pins.analogReadPin(soundpin);\n        return value;\n        //return 0;\n    }\n    //% blockId=SuperBitV2_Anaglog_Potentiometer block=\"Potentiometer|pin %value_ANum\"\n    //% weight=2\n    //% blockGap=20\n    //% name.fieldEditor=\"gridpicker\" name.fieldOption.columns=5\n    export function Potentiometer(value_ANum: mwAnalogNum): number {\n        let pin;\n        let value: number;\n        if (value_ANum == 1) { pin = AnalogPin.P4; }\n        else if (value_ANum == 2) { pin = AnalogPin.P1; }\n        else if (value_ANum == 3) { pin = AnalogPin.P0; }\n        else if (value_ANum == 4) { pin = AnalogPin.P10; }\n\n        value = pins.analogReadPin(pin);\n        return value;\n    }\n\n    //% blockId=SuperBitV2_Anaglog_Rocker block=\"Rocker|pin %value_ANum|value %value\"\n    //% weight=1\n    //% blockGap=20\n    export function Rocker(value_ANum: mwAnalogNum2, value: enRocker): boolean {\n\n        let pin1;\n        let pin2;\n\n        if (value_ANum == 1) { pin1 = AnalogPin.P1; pin2 = AnalogPin.P2; }\n        else if (value_ANum == 2) { pin1 = AnalogPin.P0; pin2 = AnalogPin.P3; }\n\n        let x = pins.analogReadPin(pin1);\n        let y = pins.analogReadPin(pin2);\n\n        let now_state = enRocker.NoState;\n\n        if (x < 100) // 左\n        {\n            now_state = enRocker.Left;\n        }\n        else if (x > 700) //右\n        {\n            now_state = enRocker.Right;\n        }\n        else  // 上下\n        {\n            if (y < 100) //下\n            {\n                now_state = enRocker.Down;\n            }\n            else if (y > 700) //上\n            {\n                now_state = enRocker.Up;\n            }\n        }\n        return now_state == value;\n    }\n\n\n\n\n}\n\n//% color=\"#ECA40D\" weight=22 icon=\"\\uf085\"\nnamespace SuperBitV2_PWM {\n\n    export enum enColor {\n        //% blockId=\"OFF\" block=\"OFF\"\n        OFF = 0,\n        //% blockId=\"Red\" block=\"Red\"\n        Red,\n        //% blockId=\"Green\" block=\"Green\"\n        Green,\n        //% blockId=\"Blue\" block=\"Blue\"\n        Blue,\n        //% blockId=\"White\" block=\"White\"\n        White,\n        //% blockId=\"Cyan\" block=\"Cyan\"\n        Cyan,\n        //% blockId=\"Pinkish\" block=\"Pinkish\"\n        Pinkish,\n        //% blockId=\"Yellow\" block=\"Yellow\"\n        Yellow\n    }\n\n    export enum mwDigitalNum {\n        //% blockId=\"P4P6\" block=\"P4P6\"\n        P4P6 = 1,\n        //% blockId=\"P1P2\" block=\"P1P2\"\n        P1P2 = 2,\n        //% blockId=\"P0P3\" block=\"P0P3\"\n        P0P3 = 3,\n        //% blockId=\"P10P9\" block=\"P10P9\"\n        P10P9 = 4,\n        //% blockId=\"P7P8\" block=\"P7P8\"\n        P7P8 = 5,\n        //% blockId=\"P5P11\" block=\"P5P11\"\n        P5P11 = 6\n    }\n\n    //% blockId=SuperBitV2_PWM_BuzzerPin block=\"Set Buzzer Pin|%value_DNum\"\n    //% weight=99\n    //% blockGap=22\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5\n    export function BuzzerPin(value_DNum: mwDigitalNum): void {\n        let pinb;\n        if (value_DNum == 1) { pinb = AnalogPin.P4; }\n        else if (value_DNum == 2) { pinb = AnalogPin.P1; }\n        else if (value_DNum == 3) { pinb = AnalogPin.P0; }\n        else if (value_DNum == 4) { pinb = AnalogPin.P10; }\n        else if (value_DNum == 5) { pinb = AnalogPin.P7; }\n        else if (value_DNum == 6) { pinb = AnalogPin.P5; }\n\n        pins.setAudioPin(pinb);\n    }\n    //% blockId=SuperBitV2_PWM_VibrationMot block=\"Vibration Motor|%value_DNum|speed %speed\"\n    //% weight=80\n    //% blockGap=22\n    //% speed.min=0 speed.max=1023\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5\n    export function VibrationMot(value_DNum: mwDigitalNum, speed: number): void {\n\n        let pin;\n        if (value_DNum == 1) { pin = AnalogPin.P4; }\n        else if (value_DNum == 2) { pin = AnalogPin.P1; }\n        else if (value_DNum == 3) { pin = AnalogPin.P0; }\n        else if (value_DNum == 4) { pin = AnalogPin.P10; }\n        else if (value_DNum == 5) { pin = AnalogPin.P7; }\n        else if (value_DNum == 6) { pin = AnalogPin.P5; }\n\n        pins.analogWritePin(pin, speed);\n    }\n\n    //% blockId=SuperBitV2_PWM_RGB block=\"RGB|(P12P13P14)|value1 %value1|value2 %value2|value3 %value3\"\n    //% weight=2\n    //% blockGap=20\n    //% value1.min=0 value1.max=255 value2.min=0 value2.max=255 value3.min=0 value3.max=255\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\n    export function RGB(value1: number, value2: number, value3: number): void {\n\n        pins.analogWritePin(AnalogPin.P13, value1 * 1024 / 256);\n        pins.analogWritePin(AnalogPin.P14, value2 * 1024 / 256);\n        pins.analogWritePin(AnalogPin.P12, value3 * 1024 / 256);\n    }\n\n    //% blockId=SuperBitV2_PWM_RGB2 block=\"RGB|(P12P13P14)|value %value\"\n    //% weight=1\n    //% blockGap=20\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\n    export function RGB2(value: enColor): void {\n        let pin1 = DigitalPin.P13;\n        let pin2 = DigitalPin.P14;\n        let pin3 = DigitalPin.P12;\n\n        switch (value) {\n            case enColor.OFF: {\n                pins.digitalWritePin(pin1, 0);\n                pins.digitalWritePin(pin2, 0);\n                pins.digitalWritePin(pin3, 0);\n                break;\n            }\n            case enColor.Red: {\n                pins.digitalWritePin(pin1, 1);\n                pins.digitalWritePin(pin2, 0);\n                pins.digitalWritePin(pin3, 0);\n                break;\n            }\n            case enColor.Green: {\n                pins.digitalWritePin(pin1, 0);\n                pins.digitalWritePin(pin2, 1);\n                pins.digitalWritePin(pin3, 0);\n                break;\n            }\n            case enColor.Blue: {\n                pins.digitalWritePin(pin1, 0);\n                pins.digitalWritePin(pin2, 0);\n                pins.digitalWritePin(pin3, 1);\n                break;\n            }\n            case enColor.White: {\n                pins.digitalWritePin(pin1, 1);\n                pins.digitalWritePin(pin2, 1);\n                pins.digitalWritePin(pin3, 1);\n                break;\n            }\n            case enColor.Cyan: {\n                pins.digitalWritePin(pin1, 0);\n                pins.digitalWritePin(pin2, 1);\n                pins.digitalWritePin(pin3, 1);\n                break;\n            }\n            case enColor.Pinkish: {\n                pins.digitalWritePin(pin1, 1);\n                pins.digitalWritePin(pin2, 0);\n                pins.digitalWritePin(pin3, 1);\n                break;\n            }\n            case enColor.Yellow: {\n                pins.digitalWritePin(pin1, 1);\n                pins.digitalWritePin(pin2, 1);\n                pins.digitalWritePin(pin3, 0);\n                break;\n            }\n        }\n    }\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":32091,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"ibV2"],[-1," Mod"],[0,"\",\n"],[1,""],[0,"    "]],"start1":24,"start2":24,"length1":15,"length2":11},{"diffs":[[0," \"*\""],[-1,",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\""],[0,"\n   "]],"start1":140,"start2":140,"length1":68,"length2":8},{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":237,"start2":237,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1727878827611,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"SuperBitLibV2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1727878936901}